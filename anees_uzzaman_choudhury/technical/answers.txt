1. Attach a prisma.schema or schema.ts (Drizzle) file from one of your past projects where you have used Prisma or Drizzle ORM.
-> model Post {
  postId     String    @id @default(uuid())
  userId     String
  channelId  String
  content    String
  attachment String?
  tagId      String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User      @relation(fields: [userId], references: [userId])
  Comments   Comment[]
  LikedBy    UserLikes[]  // Relations to UserLikes join table
  @@index([channelId])
}

model User {
  userId     String    @id @default(uuid())
  username   String    @unique
  createdAt  DateTime  @default(now())
  Posts      Post[]
  Comments   Comment[]
  Likes      UserLikes[]  // Relations to UserLikes join table
  bookmarks    String[]  @default([])  // Array of postIds that are bookmarked
  @@index([userId], name: "idx_userId") 
}

model UserLikes {
  user      User   @relation(fields: [userId], references: [userId])
  userId    String
  post      Post   @relation(fields: [postId], references: [postId])
  postId    String

  @@id([userId, postId])  // Composite primary key
}

model Comment {
  commentId  String   @id @default(uuid())
  postId     String
  fromUserId String   // Renamed from 'userId' to 'fromUserId'
  channelId  String
  content    String
  likes      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Post       Post     @relation(fields: [postId], references: [postId])
  User       User     @relation(fields: [fromUserId], references: [userId])
}


2. Explain, in your own words, the difference between "Edge Serverless" and "Serverless".
-> "Serverless" means `cloud provider` dynamically manages the allocation and provisioning of servers. 
The term "serverless" doesn't mean there are no servers involved. 
Instead, it means that developers and operators do not have to worry about the servers

"Edge Serverless" means even more Serverlessness, there are a lot of servers(more than serverless) running around the world which are 
closer to a particular user and hence provide quicker access to resources

3. Describe when and where you usually encounter bugs in your development process.
-> It's usually network request, as silly it might I sometimes forget about CORS and dont check my network tab
or send request to the wrong endpoint. Also a lot of bugs in the frontend part where a component doesn't render for some reason
or there are unexpected outcomes when dealing with different libraries

4. Discuss the importance of maintaining clean and readable code. What best practices do you follow to structure and write code for ease of reading?
-> Clean code is important as it reduces bugs down the lines for which a statically and strongly language should be the default for catching bugs at compile time
hence I use Typescript(although in this project I did not define types well because of time constraints). I also follow all other best practices
like SOLID, KISS, DRY. Another thing to consider is to avoid hasty abstractions and use of unnecessary libraries and to keep your code
readable and simple.